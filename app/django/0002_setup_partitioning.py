# Generated by Django 5.2 on 2025-04-26 15:04

from django.db import migrations, models
import uuid


def create_partitioned_tables(apps, schema_editor):
    """Create partitioned tables for candle data."""
    if schema_editor.connection.vendor != 'postgresql':
        return
        
    # Create the parent partitioned tables
    schema_editor.execute("""
    CREATE TABLE IF NOT EXISTS "stocks_dailycandle_new" (
        id UUID NOT NULL,
        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
        open NUMERIC(12, 4) NOT NULL,
        high NUMERIC(12, 4) NOT NULL,
        low NUMERIC(12, 4) NOT NULL,
        close NUMERIC(12, 4) NOT NULL,
        volume BIGINT NOT NULL,
        ticker_id INTEGER NOT NULL,
        PRIMARY KEY (ticker_id, timestamp)
    ) PARTITION BY LIST (ticker_id);
    """)
    
    schema_editor.execute("""
    CREATE TABLE IF NOT EXISTS "stocks_fivemincandle_new" (
        id UUID NOT NULL,
        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
        open NUMERIC(12, 4) NOT NULL,
        high NUMERIC(12, 4) NOT NULL,
        low NUMERIC(12, 4) NOT NULL,
        close NUMERIC(12, 4) NOT NULL,
        volume BIGINT NOT NULL,
        ticker_id INTEGER NOT NULL,
        PRIMARY KEY (ticker_id, timestamp)
    ) PARTITION BY LIST (ticker_id);
    """)
    
    schema_editor.execute("""
    CREATE TABLE IF NOT EXISTS "stocks_thirtymincandle_new" (
        id UUID NOT NULL,
        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
        open NUMERIC(12, 4) NOT NULL,
        high NUMERIC(12, 4) NOT NULL,
        low NUMERIC(12, 4) NOT NULL,
        close NUMERIC(12, 4) NOT NULL,
        volume BIGINT NOT NULL,
        ticker_id INTEGER NOT NULL,
        PRIMARY KEY (ticker_id, timestamp)
    ) PARTITION BY LIST (ticker_id);
    """)
    
    schema_editor.execute("""
    CREATE TABLE IF NOT EXISTS "stocks_hourcandle_new" (
        id UUID NOT NULL,
        timestamp TIMESTAMP WITH TIME ZONE NOT NULL,
        open NUMERIC(12, 4) NOT NULL,
        high NUMERIC(12, 4) NOT NULL,
        low NUMERIC(12, 4) NOT NULL,
        close NUMERIC(12, 4) NOT NULL,
        volume BIGINT NOT NULL,
        ticker_id INTEGER NOT NULL,
        PRIMARY KEY (ticker_id, timestamp)
    ) PARTITION BY LIST (ticker_id);
    """)
    
    # Create indexes on the partitioned tables
    schema_editor.execute("""
    CREATE INDEX IF NOT EXISTS "daily_timestamp_idx" ON "stocks_dailycandle_new" (timestamp);
    CREATE INDEX IF NOT EXISTS "daily_ticker_timestamp_idx" ON "stocks_dailycandle_new" (ticker_id, timestamp);
    CREATE INDEX IF NOT EXISTS "fivemin_timestamp_idx" ON "stocks_fivemincandle_new" (timestamp);
    CREATE INDEX IF NOT EXISTS "fivemin_ticker_timestamp_idx" ON "stocks_fivemincandle_new" (ticker_id, timestamp);
    CREATE INDEX IF NOT EXISTS "thirtymin_timestamp_idx" ON "stocks_thirtymincandle_new" (timestamp);
    CREATE INDEX IF NOT EXISTS "thirtymin_ticker_timestamp_idx" ON "stocks_thirtymincandle_new" (ticker_id, timestamp);
    CREATE INDEX IF NOT EXISTS "hour_timestamp_idx" ON "stocks_hourcandle_new" (timestamp);
    CREATE INDEX IF NOT EXISTS "hour_ticker_timestamp_idx" ON "stocks_hourcandle_new" (ticker_id, timestamp);
    """)
    
    # Create BRIN indexes (Block Range INdexes) which are very efficient for time-series data
    schema_editor.execute("""
    CREATE INDEX IF NOT EXISTS "daily_timestamp_brin_idx" ON "stocks_dailycandle_new" USING BRIN (timestamp) WITH (pages_per_range = 16);
    CREATE INDEX IF NOT EXISTS "fivemin_timestamp_brin_idx" ON "stocks_fivemincandle_new" USING BRIN (timestamp) WITH (pages_per_range = 128);
    CREATE INDEX IF NOT EXISTS "thirtymin_timestamp_brin_idx" ON "stocks_thirtymincandle_new" USING BRIN (timestamp) WITH (pages_per_range = 64);
    CREATE INDEX IF NOT EXISTS "hour_timestamp_brin_idx" ON "stocks_hourcandle_new" USING BRIN (timestamp) WITH (pages_per_range = 32);
    """)
    
    # Get Ticker model
    Ticker = apps.get_model('stocks', 'Ticker')
    
    # Create partitions for each ticker in the database
    for ticker in Ticker.objects.all():
        ticker_id = ticker.id
        symbol = ticker.symbol.lower()
        
        # Create a partition for each candle type for this ticker
        schema_editor.execute(f"""
        CREATE TABLE IF NOT EXISTS "stocks_dailycandle_{symbol}" 
        PARTITION OF "stocks_dailycandle_new" FOR VALUES IN ({ticker_id});
        """)
        
        schema_editor.execute(f"""
        CREATE TABLE IF NOT EXISTS "stocks_fivemincandle_{symbol}" 
        PARTITION OF "stocks_fivemincandle_new" FOR VALUES IN ({ticker_id});
        """)
        
        schema_editor.execute(f"""
        CREATE TABLE IF NOT EXISTS "stocks_thirtymincandle_{symbol}" 
        PARTITION OF "stocks_thirtymincandle_new" FOR VALUES IN ({ticker_id});
        """)
        
        schema_editor.execute(f"""
        CREATE TABLE IF NOT EXISTS "stocks_hourcandle_{symbol}" 
        PARTITION OF "stocks_hourcandle_new" FOR VALUES IN ({ticker_id});
        """)


def migrate_data_to_partitioned_tables(apps, schema_editor):
    """Migrate existing candle data to the new partitioned tables."""
    if schema_editor.connection.vendor != 'postgresql':
        return
        
    DailyCandle = apps.get_model('stocks', 'DailyCandle')
    FiveMinCandle = apps.get_model('stocks', 'FiveMinCandle')
    ThirtyMinCandle = apps.get_model('stocks', 'ThirtyMinCandle')
    HourCandle = apps.get_model('stocks', 'HourCandle')
    
    # Migrate data from old tables to new partitioned tables
    schema_editor.execute("""
    INSERT INTO "stocks_dailycandle_new"
    SELECT id, timestamp, open, high, low, close, volume, ticker_id
    FROM "stocks_dailycandle"
    ON CONFLICT DO NOTHING;
    """)
    
    schema_editor.execute("""
    INSERT INTO "stocks_fivemincandle_new"
    SELECT id, timestamp, open, high, low, close, volume, ticker_id
    FROM "stocks_fivemincandle"
    ON CONFLICT DO NOTHING;
    """)
    
    schema_editor.execute("""
    INSERT INTO "stocks_thirtymincandle_new"
    SELECT id, timestamp, open, high, low, close, volume, ticker_id
    FROM "stocks_thirtymincandle"
    ON CONFLICT DO NOTHING;
    """)
    
    schema_editor.execute("""
    INSERT INTO "stocks_hourcandle_new"
    SELECT id, timestamp, open, high, low, close, volume, ticker_id
    FROM "stocks_hourcandle"
    ON CONFLICT DO NOTHING;
    """)


def swap_tables(apps, schema_editor):
    """Swap the old tables with the new partitioned tables."""
    if schema_editor.connection.vendor != 'postgresql':
        return
    
    # Rename old tables with _old suffix
    schema_editor.execute("""
    ALTER TABLE IF EXISTS "stocks_dailycandle" RENAME TO "stocks_dailycandle_old";
    ALTER TABLE IF EXISTS "stocks_fivemincandle" RENAME TO "stocks_fivemincandle_old";
    ALTER TABLE IF EXISTS "stocks_thirtymincandle" RENAME TO "stocks_thirtymincandle_old";
    ALTER TABLE IF EXISTS "stocks_hourcandle" RENAME TO "stocks_hourcandle_old";
    """)
    
    # Rename new tables to the original names
    schema_editor.execute("""
    ALTER TABLE "stocks_dailycandle_new" RENAME TO "stocks_dailycandle";
    ALTER TABLE "stocks_fivemincandle_new" RENAME TO "stocks_fivemincandle";
    ALTER TABLE "stocks_thirtymincandle_new" RENAME TO "stocks_thirtymincandle";
    ALTER TABLE "stocks_hourcandle_new" RENAME TO "stocks_hourcandle";
    """)


def add_partitioning_function(apps, schema_editor):
    """Add a function to automatically create partitions for new tickers."""
    if schema_editor.connection.vendor != 'postgresql':
        return
    
    schema_editor.execute("""
    CREATE OR REPLACE FUNCTION create_candle_partition()
      RETURNS TRIGGER AS
    $BODY$
    DECLARE
      ticker_id INTEGER;
      ticker_symbol TEXT;
    BEGIN
      ticker_id := NEW.id;
      ticker_symbol := LOWER(NEW.symbol);
      
      -- Create partitions for each candle type
      EXECUTE format('CREATE TABLE IF NOT EXISTS stocks_dailycandle_%s PARTITION OF stocks_dailycandle FOR VALUES IN (%s)', 
                    ticker_symbol, ticker_id);
      
      EXECUTE format('CREATE TABLE IF NOT EXISTS stocks_fivemincandle_%s PARTITION OF stocks_fivemincandle FOR VALUES IN (%s)', 
                    ticker_symbol, ticker_id);
      
      EXECUTE format('CREATE TABLE IF NOT EXISTS stocks_thirtymincandle_%s PARTITION OF stocks_thirtymincandle FOR VALUES IN (%s)', 
                    ticker_symbol, ticker_id);
      
      EXECUTE format('CREATE TABLE IF NOT EXISTS stocks_hourcandle_%s PARTITION OF stocks_hourcandle FOR VALUES IN (%s)', 
                    ticker_symbol, ticker_id);
      
      RETURN NEW;
    END;
    $BODY$
    LANGUAGE plpgsql;
    """)
    
    # Create trigger to automatically create partitions for new tickers
    schema_editor.execute("""
    DROP TRIGGER IF EXISTS trig_create_candle_partition ON stocks_ticker;
    CREATE TRIGGER trig_create_candle_partition
      AFTER INSERT ON stocks_ticker
      FOR EACH ROW
      EXECUTE FUNCTION create_candle_partition();
    """)


class Migration(migrations.Migration):

    dependencies = [
        ('stocks', '0001_initial'),
    ]

    operations = [
        # Add UUID field to candle models
        migrations.AddField(
            model_name='dailycandle',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='fivemincandle',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='thirtymincandle',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='hourcandle',
            name='id',
            field=models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True),
            preserve_default=False,
        ),
        
        # Execute the partitioning operations
        migrations.RunPython(create_partitioned_tables),
        migrations.RunPython(migrate_data_to_partitioned_tables),
        migrations.RunPython(swap_tables),
        migrations.RunPython(add_partitioning_function),
    ]

version: '3.8'

services:
  django-app:
    image: python:3.12-slim
    container_name: django_app
    volumes:
      - ./app/django:/app
      - ./.env:/app/.env
    working_dir: /app
    env_file:
      - .env
    environment:
      - VIRTUAL_ENV=/app/.venv
      - PATH=/app/.venv/bin:$PATH
    ports:
      - "${DJANGO_LOCAL_PORT}:8000"
    command: >
      bash -c "apt-get update && apt-get install -y default-libmysqlclient-dev build-essential &&
      python -m venv .venv &&
      . venv/bin/activate &&
      pip install --upgrade pip &&
      pip install -r requirements.txt &&
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:8000"
    depends_on:
      mysql:
        condition: service_healthy

  modeling-dev:
    image: python:3.12-slim
    container_name: modeling_dev
    volumes:
      - ./app/modeling:/app
    working_dir: /app
    env_file:
      - .env
    # Don't automatically start with docker-compose up
    profiles: ["dev"]
    # Interactive mode for development
    stdin_open: true
    tty: true
    command: bash
    depends_on:
      mysql:
        condition: service_healthy

  mysql:
    # Existing MySQL service configuration
    image: mysql:8.0
    container_name: mysql_db
    env_file:
      - .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_HOST: ${MYSQL_ROOT_HOST}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DEFAULT_AUTHENTICATION_PLUGIN: mysql_native_password
    ports:
      - "${MYSQL_LOCAL_PORT}:3306"
    volumes:
      - ./mysql-data:/var/lib/mysql
      - ./mysql-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 10s
      retries: 10

volumes:
  mysql-data: